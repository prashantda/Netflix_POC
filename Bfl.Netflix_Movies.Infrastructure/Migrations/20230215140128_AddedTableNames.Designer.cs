// <auto-generated />
using System;
using Bfl.Netflix.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bfl.Netflix.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230215140128_AddedTableNames")]
    partial class AddedTableNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Cast", b =>
                {
                    b.Property<Guid>("CastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("CastId");

                    b.ToTable("Casts", (string)null);

                    b.HasData(
                        new
                        {
                            CastId = new Guid("9245e61d-20cf-4fee-aaae-d261182f8f69"),
                            CastName = "Aamir Khan"
                        },
                        new
                        {
                            CastId = new Guid("d39b6791-1330-465f-99b5-3a537c1b9758"),
                            CastName = "Akshay Kumar"
                        },
                        new
                        {
                            CastId = new Guid("72474143-14a5-4727-9ecc-e87bf7a32d9e"),
                            CastName = "Ajay Devgn"
                        },
                        new
                        {
                            CastId = new Guid("4301810d-ecce-4e5a-be0d-dcd1106f0fc3"),
                            CastName = "Amjad Khan"
                        },
                        new
                        {
                            CastId = new Guid("989efc3e-aab9-489c-813e-e5a0bee7b754"),
                            CastName = "Amitabh Bachchan"
                        },
                        new
                        {
                            CastId = new Guid("a02815a4-0f1b-4e43-89fa-cb231ad8ed11"),
                            CastName = "Amol Palekar"
                        },
                        new
                        {
                            CastId = new Guid("57632fe9-017d-41c4-8d4e-28571dbd8d87"),
                            CastName = "Akshaye Khanna"
                        },
                        new
                        {
                            CastId = new Guid("8e6f2587-5183-4baf-9d44-39bc0b6f67da"),
                            CastName = "Anushka Shetty"
                        },
                        new
                        {
                            CastId = new Guid("a9b82b2f-d28b-46bb-a86b-fd0828636751"),
                            CastName = "Ayushmann Khurrana"
                        },
                        new
                        {
                            CastId = new Guid("e62fe11d-52d0-4a25-8505-f9a4c84a3cee"),
                            CastName = "Anil Kapoor"
                        },
                        new
                        {
                            CastId = new Guid("67461f57-a5d8-459c-a90c-4da75d0890a7"),
                            CastName = "Deepika Padukone"
                        },
                        new
                        {
                            CastId = new Guid("200d1941-a014-4179-afcc-bf15bf0a17ed"),
                            CastName = "Madhuri Dixit"
                        },
                        new
                        {
                            CastId = new Guid("27eafb12-057a-4d7f-8181-320ac73a8531"),
                            CastName = "Madhubala"
                        },
                        new
                        {
                            CastId = new Guid("8cf650c8-77fc-45bc-acb4-0a306923a5e9"),
                            CastName = "Rajkummar Rao"
                        },
                        new
                        {
                            CastId = new Guid("6c1b7706-a0b6-4b2d-951c-18144e5c5386"),
                            CastName = "Tabu"
                        },
                        new
                        {
                            CastId = new Guid("1b29488f-e330-42b9-9b61-78121f9c0230"),
                            CastName = "Tapasi Pannu"
                        },
                        new
                        {
                            CastId = new Guid("fd68d09c-29bc-4e97-909a-2c5360ddf582"),
                            CastName = "Samantha Prabhu"
                        },
                        new
                        {
                            CastId = new Guid("0f83f70f-6d89-42f3-953f-5ea5729be362"),
                            CastName = "Sai Pallavi"
                        },
                        new
                        {
                            CastId = new Guid("66f46881-e918-42a4-8dce-803ca8e5b210"),
                            CastName = "Shradhaa Kapoor"
                        },
                        new
                        {
                            CastId = new Guid("7ad3d36b-58c5-416d-a34e-c1f5460feb31"),
                            CastName = "Ranvir Kapoor"
                        },
                        new
                        {
                            CastId = new Guid("5da44770-40ce-450b-b3df-0255ddb9a299"),
                            CastName = "Aliya Bhatt"
                        },
                        new
                        {
                            CastId = new Guid("d9b15da5-7058-4474-ae67-766d462785b3"),
                            CastName = "Kiaara Adavani"
                        },
                        new
                        {
                            CastId = new Guid("ad529778-2e1c-4b2d-a9bf-10d8cc1f0791"),
                            CastName = "Sushant Sing Rajpoot"
                        },
                        new
                        {
                            CastId = new Guid("a6e6fae2-51d8-4c54-92f9-713917f823b7"),
                            CastName = "ABC"
                        });
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("c03bbe45-9aeb-4d24-99e0-4743016ffce9"),
                            CategoryName = "Award Winners"
                        },
                        new
                        {
                            CategoryId = new Guid("56bf46a4-02b8-4693-a0f5-0a95e2218bdc"),
                            CategoryName = "Biographical"
                        },
                        new
                        {
                            CategoryId = new Guid("c3abddbd-cf50-41d2-b6c4-cc7d5a750928"),
                            CategoryName = "Blockbusters"
                        },
                        new
                        {
                            CategoryId = new Guid("c6d50a47-f7e6-4482-8be0-4ddfc057fa6e"),
                            CategoryName = "Bollywood"
                        },
                        new
                        {
                            CategoryId = new Guid("d15c6d9f-70b4-48c5-afd3-e71261f1a9be"),
                            CategoryName = "Kids and Family"
                        },
                        new
                        {
                            CategoryId = new Guid("89e5f445-d89f-4e12-94e0-5ad5b235d704"),
                            CategoryName = "Comedies"
                        },
                        new
                        {
                            CategoryId = new Guid("2a6d3738-9def-43ac-9279-0310edc7ceca"),
                            CategoryName = "Documentries"
                        },
                        new
                        {
                            CategoryId = new Guid("29339209-63f5-492f-8459-754943c74abf"),
                            CategoryName = "Dramas"
                        },
                        new
                        {
                            CategoryId = new Guid("ac660a73-b0b7-4340-abc1-a914257a6189"),
                            CategoryName = "Fantasy"
                        },
                        new
                        {
                            CategoryId = new Guid("012107df-862f-4f16-ba94-e5c16886f005"),
                            CategoryName = "Hollywood"
                        },
                        new
                        {
                            CategoryId = new Guid("cb035f22-e7cf-4907-bd07-91cfee5240f3"),
                            CategoryName = "Horrer"
                        },
                        new
                        {
                            CategoryId = new Guid("28d11936-9466-4a4b-b9c5-2f0a8e0cbde9"),
                            CategoryName = "International"
                        },
                        new
                        {
                            CategoryId = new Guid("a3b9833b-8a4d-43e9-8690-61e08df81a9a"),
                            CategoryName = "Musicals"
                        },
                        new
                        {
                            CategoryId = new Guid("501c6d13-1bbe-48f1-4fbd-2275913c6216"),
                            CategoryName = "Reality"
                        },
                        new
                        {
                            CategoryId = new Guid("501c6d33-1bbe-45f1-8fbd-2275913c6218"),
                            CategoryName = "Romance"
                        },
                        new
                        {
                            CategoryId = new Guid("8f30bedc-47dd-4286-8950-73d8a68e5d41"),
                            CategoryName = "Sci-Fi"
                        },
                        new
                        {
                            CategoryId = new Guid("12e15727-d369-49a9-8b13-bc22e9362179"),
                            CategoryName = "Stand-Up"
                        },
                        new
                        {
                            CategoryId = new Guid("14629847-905a-4a0e-9abe-80b61655c5cb"),
                            CategoryName = "Thrillers"
                        });
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Episode", b =>
                {
                    b.Property<Guid>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EpisodeId");

                    b.HasIndex("TvShowId");

                    b.ToTable("Episodes", (string)null);
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterNo")
                        .HasColumnType("int");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.MovieCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CastId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCats");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.MovieCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.TvShowCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CastId");

                    b.HasIndex("TvShowId");

                    b.ToTable("TvShowCasts");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.TvShowCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TvShowId");

                    b.ToTable("TvShowCategories");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.TvShow", b =>
                {
                    b.Property<Guid>("TvShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Seasons")
                        .HasColumnType("int");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TvShowName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TvShowId");

                    b.ToTable("TvShows", (string)null);
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Episode", b =>
                {
                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.TvShow", "TvShows")
                        .WithMany("Episodes")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShows");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.MovieCast", b =>
                {
                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.Cast", "Casts")
                        .WithMany("MovieCasts")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieCasts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casts");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.MovieCategory", b =>
                {
                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.TvShowCast", b =>
                {
                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.Cast", "Cast")
                        .WithMany("TvShowCasts")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.TvShow", "TvShow")
                        .WithMany("TvShowCasts")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cast");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Relationships.TvShowCategory", b =>
                {
                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.Category", "Category")
                        .WithMany("TvShowCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bfl.Netflix.Core.Domain.Entities.TvShow", "TvShow")
                        .WithMany("TvShowCategories")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Cast", b =>
                {
                    b.Navigation("MovieCasts");

                    b.Navigation("TvShowCasts");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Category", b =>
                {
                    b.Navigation("MovieCategories");

                    b.Navigation("TvShowCategories");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.Movie", b =>
                {
                    b.Navigation("MovieCasts");

                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("Bfl.Netflix.Core.Domain.Entities.TvShow", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("TvShowCasts");

                    b.Navigation("TvShowCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
